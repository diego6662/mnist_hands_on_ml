# -*- coding: utf-8 -*-
"""mnist_chapter4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RgCo-8PPl3r5EjA0ZjTASiPxVyWMdKMx
"""

from sklearn.datasets import load_digits
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.metrics import accuracy_score
import numpy as np

mnist_data = load_digits()

print(mnist_data.keys())

X = mnist_data.data
y = mnist_data.target

"""
The objective is train knn model to classified the mnist dataset with
97% as goal
"""

knn_clf = KNeighborsClassifier()
param_grid = {
    'n_neighbors': [*range(1,16)],
    'weights': ['uniform', 'distance']
}
grid_clf = GridSearchCV(knn_clf, param_grid, cv=5, n_jobs=-1)

x_train, x_test, y_train, y_test = train_test_split(X,y, test_size=60, random_state=42)

grid_clf.fit(x_train, y_train)

best_knn_clf = grid_clf.best_estimator_

best_knn_clf.fit(x_train, y_train)

print(y_test)

y_hat = best_knn_clf.predict(x_test)

print(accuracy_score(y_test, y_hat))

def one_shift(x, direction):
  """
  up: u
  right: r
  down: d
  left: l
  """
  if direction == 'u':
    x = x.reshape(8,8)
    x[:-1,:] = x[1:,:]
    x[-1,:] = 0.0
    return x.flatten()
  elif direction == 'r':
    x = x.reshape(8,8)
    x[:,1:] = x[:,:-1]
    x[:,0] = 0.0
    return x.flatten()
  elif direction == 'd':
    x = x.reshape(8,8)
    x[1:,:] = x[:-1,:]
    x[0,:] = 0.0
    return x.flatten()
  else:
    x = x.reshape(8,8)
    x[:,:-1] = x[:,1:]
    x[:,-1] = 0.0
    return x.flatten()

directions = ['u', 'r', 'd', 'l']
x_train2 = x_train.copy()
for i in directions:
  x_copy = x_train.copy()
  shifted_data = []
  for j in x_copy:
    shifted_x = one_shift(j,i)
    shifted_data.append(shifted_x)
  shifted_data = np.array(shifted_data)
  x_train2 = np.concatenate([x_train2,shifted_data])
print(x_train2.shape )

y_train2 = np.concatenate([y_train] * 5)
print(y_train2.shape)

knn_clf_2 = grid_clf.best_estimator_
knn_clf_2.fit(x_train2,y_train2)

y_hat_2 = knn_clf_2.predict(x_test)

print(accuracy_score(y_test, y_hat_2))